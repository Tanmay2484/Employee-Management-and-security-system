#include <iostream>
#include <iomanip>
#include <string>
#include <cstdlib>
#include <vector>
#include <algorithm>
using namespace std;

class Employee {
private:
    int id;
    string name, gender, position;
    double salary;
    string password;

public:
    Employee() {
        id = 0;
        name = "Unknown";
        gender = "Unknown";
        position = "Unknown";
        salary = 0;
        password = "";
    }

    int getId() const {
        return id;
    }

    string getName() const {
        return name;
    }

    string getGender() const {
        return gender;
    }

    string getPosition() const {
        return position;
    }

    double getSalary() const {
        return salary;
    }

    string getPassword() const {
        return password;
    }

    void setId(int id) {
        this->id = id;
    }

    void setName(const string& name) {
        this->name = name;
    }

    void setGender(const string& gender) {
        this->gender = gender;
    }

    void setPosition(const string& position) {
        this->position = position;
    }

    void setSalary(double salary) {
        this->salary = salary;
    }

    void setPassword(const string& pass) {
        password = pass;
    }

    void input() {
        cout << "Enter your Employee Id: ";
        cin >> id;
        cin.ignore();
        cout << "Enter your Employee Name: ";
        getline(cin, name);
        cout << "Enter your gender: ";
        cin >> gender;
        cout << "Enter your position: ";
        cin >> position;

        cout << "Set a password (at least 5 characters, starting with a capital letter, containing at least one special character): ";
        string pass;
        cin >> pass;
        while (!isValidPassword(pass)) {
            cout << "Invalid password! Please try again: ";
            cin >> pass;
        }
        setPassword(pass);

        cout << "Enter your salary: ";
        cin >> salary;
    }

    bool isValidPassword(const string& pass) {
        if (pass.length() < 5) {
            return false;
        }

        if (!isupper(pass[0])) {
            return false;
        }

        bool hasSpecialChar = false;
        for (char c : pass) {
            if (!isalnum(c)) {
                hasSpecialChar = true;
                break;
            }
        }

        return hasSpecialChar;
    }

    void output() const {
        cout << setw(10) << id;
        cout << setw(15) << name;
        cout << setw(10) << gender;
        cout << setw(15) << position;
        cout << setw(10) << salary << endl;
    }

    static void printHeader() {
        cout << setw(10) << "ID";
        cout << setw(15) << "NAME";
        cout << setw(10) << "GENDER";
        cout << setw(15) << "POSITION";
        cout << setw(10) << "SALARY" << endl;
    }

    static void getList(const vector<Employee>& employees) {
        printHeader();
        for (const Employee& emp : employees) {
            emp.output();
        }
    }

    static void searchById(const vector<Employee>& employees) {
        int idSearch, isFound;
        cout << "Input employee id to search: ";
        cin >> idSearch;
        isFound = 0;
        printHeader();
        for (const Employee& emp : employees) {
            if (idSearch == emp.getId()) {
                emp.output();
                isFound = 1;
                break;
            }
        }
        if (isFound == 0) {
            cout << "Message ----> Id " << idSearch << " Not found" << endl;
        }
    }

    static void searchByName(const vector<Employee>& employees) {
        int isFound;
        string textSearch;
        cout << "Input employee name to search: ";
        cin.ignore();
        getline(cin, textSearch);
        isFound = 0;
        printHeader();
        for (const Employee& emp : employees) {
            if (textSearch == emp.getName()) {
                emp.output();
                isFound = 1;
                break;
            }
        }
        if (isFound == 0) {
            cout << "Message ----> Name " << textSearch << " Not found" << endl;
        }
    }

    static void searchByPosition(const vector<Employee>& employees) {
        int isFound;
        string positionSearch;
        cout << "Input employee position to search: ";
        cin >> positionSearch;
        isFound = 0;
        printHeader();
        for (const Employee& emp : employees) {
            if (positionSearch == emp.getPosition()) {
                emp.output();
                isFound = 1;
                break;
            }
        }
        if (isFound == 0) {
            cout << "Message ----> Position " << positionSearch << " Not found" << endl;
        }
    }

    static void sortNameASC(vector<Employee>& employees) {
        sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
            return a.getName() < b.getName();
        });
        cout << "======= Sort name ASC ====== " << endl;
        getList(employees);
    }

    static void sortNameDESC(vector<Employee>& employees) {
        sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
            return a.getName() > b.getName();
        });
        cout << "======= Sort name DESC ====== " << endl;
        getList(employees);
    }

    static void sortSalaryASC(vector<Employee>& employees) {
        sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
            return a.getSalary() < b.getSalary();
        });
        cout << "======= Sort Salary ASC ====== " << endl;
        getList(employees);
    }

    static void sortSalaryDESC(vector<Employee>& employees) {
        sort(employees.begin(), employees.end(), [](const Employee& a, const Employee& b) {
            return a.getSalary() > b.getSalary();
        });
        cout << "======= Sort Salary DESC ====== " << endl;
        getList(employees);
    }

    static void deleteByID(vector<Employee>& employees) {
        int idSearch, isFound;
        cout << "Input employee ID to delete: ";
        cin >> idSearch;
        isFound = 0;
        for (size_t i = 0; i < employees.size(); i++) {
            if (idSearch == employees[i].getId()) {
                employees.erase(employees.begin() + i);
                isFound = 1;
                break;
            }
        }
        if (isFound == 0) {
            cout << "Message ----> ID " << idSearch << " Not found" << endl;
        }
    }

    static void updateById(vector<Employee>& employees) {
        int idSearch, isFound, optionUpdate;
        cout << "Input Employee ID to update: ";
        cin >> idSearch;
        isFound = 0;
        for (size_t i = 0; i < employees.size(); i++) {
            if (idSearch == employees[i].getId()) {
                printHeader();
                employees[i].output();
                cout << "What do you want to update? " << endl;
                cout << "1. Update name" << endl;
                cout << "2. Update gender" << endl;
                cout << "3. Update position" << endl;
                cout << "4. Update salary" << endl;
                cout << "5. Update all" << endl;
                cout << "Enter your option (1-5): ";
                cin >> optionUpdate;
                switch (optionUpdate) {
                    case 1:
                        cout << "Input new Name: ";
                        cin.ignore();
                        getline(cin, employees[i].name);
                        employees[i].setName(employees[i].name);
                        break;
                    case 2:
                        cout << "Input new Gender: ";
                        cin >> employees[i].gender;
                        employees[i].setGender(employees[i].gender);
                        break;
                    case 3:
                        cout << "Input new Position: ";
                        cin >> employees[i].position;
                        employees[i].setPosition(employees[i].position);
                        break;
                    case 4:
                        cout << "Input new Salary: ";
                        cin >> employees[i].salary;
                        employees[i].setSalary(employees[i].salary);
                        break;
                    case 5:
                        cout << "Input new Name: ";
                        cin.ignore();
                        getline(cin, employees[i].name);
                        employees[i].setName(employees[i].name);
                        cout << "Input new Gender: ";
                        cin >> employees[i].gender;
                        employees[i].setGender(employees[i].gender);
                        cout << "Input new Position: ";
                        cin >> employees[i].position;
                        employees[i].setPosition(employees[i].position);
                        cout << "Input new Salary: ";
                        cin >> employees[i].salary;
                        employees[i].setSalary(employees[i].salary);
                        break;
                }
                isFound = 1;
                break;
            }
        }
        if (isFound == 0) {
            cout << "Message ----> ID " << idSearch << " Not found" << endl;
        }
    }
};

int main() {
    vector<Employee> employees;
    int option, optionLevel1;
    bool isLoggedIn = false;
    int loggedInId = -1;

    do {
        if (!isLoggedIn) {
            cout << "\n1. Signup" << endl;
            cout << "2. Login" << endl;
            cout << "3. Exit Program" << endl;
            cout << "Input choice (1-3): ";
            cin >> option;
            switch (option) {
                case 1: {
                    Employee emp;
                    emp.input();
                    employees.push_back(emp);
                    cout << "Signup successful! Please remember your Employee Id and password for login." << endl;
                    break;
                }
                case 2: {
                    int loginId;
                    string loginPassword;
                    cout << "Enter your Employee Id: ";
                    cin >> loginId;
                    Employee* loggedInEmployee = nullptr;
                    for (Employee& emp : employees) {
                        if (loginId == emp.getId()) {
                            loggedInEmployee = &emp;
                            break;
                        }
                    }

                    if (loggedInEmployee) {
                        cout << "Enter your password: ";
                        cin >> loginPassword;
                        if (loginPassword == loggedInEmployee->getPassword()) {
                            cout << "Login successful! Welcome, " << loggedInEmployee->getName() << "!" << endl;
                            isLoggedIn = true;
                            loggedInId = loginId;
                        } else {
                            cout << "Login failed! Incorrect password." << endl;
                        }
                    } else {
                        cout << "Login failed! Employee Id not found." << endl;
                    }
                    break;
                }
                case 3:
                    exit(0);
                    break;
                default:
                    cout << "Invalid option. Please enter a valid option." << endl;
            }
        } else {
            cout << "\n1. Input Employee" << endl;
            cout << "2. List all Employees" << endl;
            cout << "3. Search Employee" << endl;
            cout << "4. Sort Employees" << endl;
            cout << "5. Delete Employee" << endl;
            cout << "6. Update Employee" << endl;
            cout << "7. Logout" << endl;
            cout << "8. Exit Program" << endl;
            cout << "Input choice (1-8): ";
            cin >> option;
            switch (option) {
                case 1: {
                    Employee emp;
                    emp.input();
                    employees.push_back(emp);
                    break;
                }
                case 2:
                    Employee::getList(employees);
                    break;
                case 3:
                    do {
                        cout << "Search Employee" << endl;
                        cout << "1. Search by Id" << endl;
                        cout << "2. Search by Name" << endl;
                        cout << "3. Search by Position" << endl;
                        cout << "4. Back" << endl;
                        cout << "Input choice (1-4): ";
                        cin >> optionLevel1;
                        switch (optionLevel1) {
                            case 1:
                                Employee::searchById(employees);
                                break;
                            case 2:
                                Employee::searchByName(employees);
                                break;
                            case 3:
                                Employee::searchByPosition(employees);
                                break;
                        }
                    } while (optionLevel1 != 4);
                    break;
                case 4:
                    do {
                        cout << "Sort Employees" << endl;
                        cout << "1. Sort by Name ASC" << endl;
                        cout << "2. Sort by Name DESC" << endl;
                        cout << "3. Sort by Salary ASC" << endl;
                        cout << "4. Sort by Salary DESC" << endl;
                        cout << "5. Back" << endl;
                        cout << "Input choice (1-5): ";
                        cin >> optionLevel1;
                        switch (optionLevel1) {
                            case 1:
                                Employee::sortNameASC(employees);
                                break;
                            case 2:
                                Employee::sortNameDESC(employees);
                                break;
                            case 3:
                                Employee::sortSalaryASC(employees);
                                break;
                            case 4:
                                Employee::sortSalaryDESC(employees);
                                break;
                        }
                    } while (optionLevel1 != 5);
                    break;
                case 5:
                    Employee::deleteByID(employees);
                    break;
                case 6:
                    Employee::updateById(employees);
                    break;
                case 7:
                    isLoggedIn = false;
                    loggedInId = -1;
                    cout << "Logout successful!" << endl;
                    break;
                case 8:
                    exit(0);
                    break;
                default:
                    cout << "Invalid option. Please enter a valid option." << endl;
            }
        }
    } while (option != 8);
    return 0;
}
